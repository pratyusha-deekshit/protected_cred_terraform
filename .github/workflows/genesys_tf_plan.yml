### Reusable workflow to plan terraform deployment, create artifact and upload to workflow artifacts for consumption ###
name: "genesys_tf_plan"
on:
  workflow_call:
    inputs:
      tf_version:
        description: 'Specifies version of Terraform to use. e.g: 1.1.0 Default=latest.'
        required: false
        type: string
        default: latest
      gh_environment:
        description: 'Specifies the GitHub deployment environment.'
        required: false
        type: string
        default: null

jobs:
  terraformPlan:
    if: github.ref == 'refs/heads/develop'
    name: 'Terraform_plan'
    runs-on: ubuntu-latest
    environment: dev
    env:
      GENESYSCLOUD_OAUTHCLIENT_ID: ${{ secrets.GENESYSCLOUD_OAUTHCLIENT_ID }}
      GENESYSCLOUD_OAUTHCLIENT_SECRET: ${{ secrets.GENESYSCLOUD_OAUTHCLIENT_SECRET }}
      GENESYSCLOUD_API_REGION: "https://api.euw2.pure.cloud"
      GENESYSCLOUD_REGION: "eu-west-2"
      GENESYSCLOUD_ARCHY_REGION: "euw2.pure.cloud"

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: ${{ inputs.tf_version }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      working-directory: ./genesys_objects
      run: |
          export oauthclient_id=$GENESYSCLOUD_OAUTHCLIENT_ID
          export oauthclient_secret=$GENESYSCLOUD_OAUTHCLIENT_SECRET
          export aws_region=$GENESYSCLOUD_REGION

          terraform init

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      working-directory: ./genesys_objects
      run: terraform plan -input=false

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
